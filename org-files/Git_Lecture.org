#+SETUPFILE: ./org-html-themes/org/theme-bigblow.setup
#+TITLE: Lecture on Git and Github
#+AUTHOR: Jan Boone
#+OPTIONS: toc:1 num:nil timestamp:nil

* some basics

- git is a version control system
- Install git: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git
- We will use git on the command line

Information about git:
- book with "more than you need to know": https://git-scm.com/book/en/v2
- cheatsheet: https://education.github.com/git-cheat-sheet-education.pdf
- datacamp: https://app.datacamp.com/learn/courses/introduction-to-git
- youtube tutorials

** different states

Local files in git can be in a number of states:
- untracked
- tracked:
  - unmodified
  - modified
  - staged
  - committed


* standard workflow

** some settings

- =git config --global user.name "John Doe"=
- =git config --global user.email johndoe@example.com=
- get access token:
  - on github page click on icon top right corner:
  - Settings
  - < > Developer settings
  - Personal access tokens
  - Generate new token: keep this page open so that you can copy/paste the token a number of times
  - *warning:* treat this token as a password!!!

** workflow

- to start:
  - =git init= or
  - =git clone= https://github.com etc.
- when you change or add files:
  - =git add= file
  - =git commit -m "message to explain what commit does"=
  - =git push= to get your repository on the github server up-to-date
    - is shorthand for: push local branch =master= to the =origin= server: =git push origin master=
    - if someone else pushed before you, you need to merge their content first before you can push

**  useful commands:
- =git status=
- =git diff=:
  - shows the changes in a file that are still unstaged

** some practice

*** clone a repository

- go to github.com and create a new repository
- in the repos. click on the green "Code" button and copy the https address
- open a (git) terminal and type =git clone= then paste the https-address you just copied
- this clones this repository to your computer

*** edit a file

- edit a file from your repository, e.g. the README file
- or create a new file and edit this file
- then we type:
  - if you created a new file: =git add= new-file-name (this is not necessary if you edited an existing file)
  - =git commit -m "these changes were made on my laptop"=
  - =git push=
- go to github and check that you can see your changes on-line


*** pull changes made on github

- edit the file online by  adding text.
- use as commit message "these additions I made online"
- in the terminal type: =git pull=
- check that this file on your laptop now also has these changes

*** create a conflict

- edit the file online by deleting and adding some text.
- use as commit message "these changes I made online"
- also change the same file on your laptop by deleting and adding text
- commit these changes with message "other changes I made on my laptop"
- type =git pull=
- why do you get an error?

*** resolve the conflict

- open the file on your laptop
- notice the syntax with <<<<< ===== >>>>>
- manually resolve the conflicts in the relevant file(s)
- =git add= the corrected file(s)
- =git commit=
- =git push=

* some more advanced features

- file =.gitignore= for files that are not to be tracked by git
- e.g. when you use latex and you do not want .aux, .log files etc.
  - example: https://github.com/github/gitignore/blob/main/TeX.gitignore
- rename a file in git: =git mv oldname newname=
- revert a file back to what it was in last commit: =git checkout -- file.name=

** branching

*** underlying idea

- git allows you to have simultaneously different versions of your files
- you can experiment on one branch (called, say, testing)
- when you are happy with the results, you can merge them into your main branch

*** some practice

- create a new branch =testing=: =git branch testing=
- switch to this new branch: =git checkout testing=
- change a file on branch =testing=
- =git checkout master=
- now this file is "back to the state" it was in before we switched to =testing=
- =git merge testing=
- =git branch -d testing= to delete the =testing= branch


*** conflicts

- if you changed the same part of the same file differently in the two branches, Git cannot merge them cleanly:
  - =git status= to check which files are unmerged
  - manually merge the files by looking for syntax: <<<<< HEAD ====  >>>>>testing
  - run =git status= again to check everything is resolved
  - then =git commit=
- =git branch= gives an overview of your current branches
- pointer =HEAD= points to branch you are currently on
